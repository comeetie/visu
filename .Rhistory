filter(!is.na(tx_naiss))
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
dplyr::filter(!is.na(tx_naiss))
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept"))
data_map
data_map$txnaiss
data_map(filter(!is.na(txnaiss)))
json = fromJSON(file="http://vlsstats.ifsttar.fr/data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind,lst)
st.sf = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
#Calcul des voronois
bbox_polygon <- function(x) {
bb <- sf::st_bbox(x)
p <- matrix(
c(bb["xmin"], bb["ymin"],
bb["xmin"], bb["ymax"],
bb["xmax"], bb["ymax"],
bb["xmax"], bb["ymin"],
bb["xmin"], bb["ymin"]),
ncol = 2, byrow = T
)
sf::st_polygon(list(p))
}
nc_centroids=st_centroid(st.sf)
box=st_sfc(bbox_polygon(nc_centroids))
head(nc_centroids)
head(st_union(nc_centroids))
v=st_voronoi(st_union(nc_centroids),box)
d=st_geometry(st.sf)
d=st_union(d)
hull=st_convex_hull(d)
plot(st_intersection(st_cast(v), hull), col = "grey") # clip to smaller box
plot(nc_centroids, add = TRUE)
monuments  = read_sf("./data/monuments_paris.geojson")
monuments_hist  = read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
monuments$id=as.character(monuments$id)
monuments_hist$Référence=as.character(monuments_hist$Référence)
#on passe à la jointure avant de tracer la carte interactive
m=monuments %>% left_join(monuments_hist, by=c("id"="Référence"))
#carte interactive
leaflet(data = m) %>%
addTiles() %>%
addCircleMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante),radius=5,stroke=FALSE, color = "blueviolet")
iris=st_read(dsn="./data/iris75.geojson")
iris_t = iris %>% st_transform(2154)
# monuments par iris
monuments_iris = st_contains(iris_t,st_transform(m,2154))
iris_t$nb_monuments = sapply(monuments_iris,length)
# carte
par(mar=c(0.2,0.2,1.4,0.2))
bb <- st_bbox(iris_t)
plot(st_geometry(iris_t), col = "ivory", border="ivory3",  bg="azure",
xlim = bb[c(1,3)], ylim =  bb[c(2,4)])
propSymbolsLayer(iris_t, var = "nb_monuments", col="darkred", inches = 0.3,
border = "white", lwd=0.7, symbols = "square",
legend.style = "e", legend.pos="topleft",
legend.title.txt = "Nombre de monuments",
legend.values.rnd = 0)
north(pos = "topright", col = "darkred")
layoutLayer(title = "Nombre de monuments par iris à Paris",
col = "darkred", coltitle = "white", tabtitle = TRUE,
frame = TRUE, scale = NULL, north = FALSE)
leaflet(data=st.sf) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "blue")
library(sf)
library(dplyr)
dep=st_read("./data/exo6_dep/dep.shp")
data=read.csv("exo6_data.csv")
dep=st_read("./data/exo6_dep/dep.shp")
data=read.csv("./data/exo6_data.csv")
library(stringr)
#dep$wikipedia
names(dep)[4]="dept"
dep$dept=str_replace_all(dep$dept,"fr:","")
dep$dept
#dep=str_replace_all(dep,"�","é")
data2=data %>% group_by(code_dept) %>% summarise(nbr_naissance = sum(nombre_naissances_2011),
population2011=sum(Population_2011)) %>%
mutate(taux_naissance = nbr_naissance/population2011*100)
data2
data2 =data2 %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
data2 =data2 %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
DATA = dep %>%
left_join(data2,by=c("code_insee"="code_dept")) %>%
filter(!is.na(taux_naissance))
library(cartography)
plot(st_geometry(DATA))
choroLayer(DATA,var="taux_naissance",legend.title.txt="taux de naissance
(en %)")
title("Taux de naissance")
library(leaflet)
json = fromJSON(file = "input_NewYork.json")
library(leaflet)
json = fromJSON(file = "./data/input_NewYork.json")
s = lapply(json$stationBeanList, function(s){as.data.frame(s)})
voronois = do.call(rbind,s)
voronois = st_as_sf(voronois %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"))
plot(voronois)
monument=read_sf("monuments_paris.geojson")
monument=read_sf("./data/monuments_paris.geojson")
monument
dataexo3= read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
str(dataexo3)
dataexo3
jointexo3 = monument %>% left_join(dataexo3,by=c("id"="Référence"))
# carte interactive
leaflet(data = jointexo3) %>%
addTiles() %>%
addMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante))
leaflet(data = jointexo3) %>%
addTiles() %>%
addCircleMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante),radius=5,stroke=FALSE)
iris = read_sf("iris75.geojson")
iris = read_sf("./data/iris75.geojson")
iris2154 = iris %>% st_transform(2154)
x= iris2154 %>%  st_contains(st_transform(jointexo3,2154))
iris2154$nbmonum = sapply(x,length)
plot(st_geometry(iris2154))
propSymbolsLayer(iris2154,var="nbmonum")
voronois2 = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
leaflet(data=voronois2) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "red")
tiles <- getTiles(x = voronois2, type = "osm",crop=TRUE)
tilesLayer(tiles)
propSymbolsLayer(voronois2,var="availableBikes")
install.packages("revealjs")
install.packages("revealjs")
library(readr)
dansmarue.df = read_csv('./data/dansmarue_sample.csv',col_names = TRUE)
dansmarue.df = read_delim('./data/dansmarue_sample.csv',delim=";",col_names = TRUE)
dansmarue.df$geo_point_2d
dansmarue.df$geo_shape
library(tydyr)
library(tidyr)
dansmarue.df$DATEDECL
class(dansmarue.df$DATEDECL)
dansmarue.df
dansmarue.df$OBJECTID
library(tidyr)
dansmarue.df %>% separate(geo_point_2d,c("lat","long",sep=","))
dansmarue.df$VILLE
unique(dansmarue.df$VILLE)
dansmarue.df
dansmarue.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long",sep=","),convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long)
dansmarue.df = read_delim('./data/dansmarue_sample.csv',delim=";",col_names = TRUE)
dansmarue.df$geo_shape
dansmarue.df$geo_point_2d
dansmarue.df[1:100,] %>% separate(geo_point_2d,c("lat","long",sep=","),convert = TRUE)
?separate
dd=dansmarue.df[1:100,] %>% separate(geo_point_2d,c("lat","long",sep=","),convert = TRUE)
dd$lat
dd$long
dansmarue.df$geo_point_2d
dansmarue.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long"),sep=",",convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long)
dansmarue.cl.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long"),sep=",",convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long)
library(dplyr)
dansmarue.cl.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long"),sep=",",convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long)
dansmarue.cl.df
write_csv(dansmarue.cl.df,"./data/dansmarue_small.csv")
dansmarue.cl.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long"),sep=",",convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long) %>% arrange(DATEDECL)
dansmarue.cl.df
dansmarue.cl.df = dansmarue.df %>% separate(geo_point_2d,c("lat","long"),sep=",",convert = TRUE) %>%
select(TYPE,SOUSTYPE,CODE_POSTAL,DATEDECL,INTERVENANT,lat,long) %>% arrange(desc(DATEDECL))
dansmarue.cl.df
dansmarue.cl.df[500000,]
dansmarue.cl.df %>% mutate(year= year(DATEDECL))
library(lubridate)
dansmarue.cl.df %>% mutate(year= year(DATEDECL))
dansmarue.cl.df %>% filter(year(DATEDECL)>2018)
dansmarue.cl.df %>% filter(year(DATEDECL)>2017)
write_csv(dansmarue.cl.df %>% filter(year(DATEDECL)>2017),"./data/dansmarue_small.csv")
library(cartography)
library(sf)
library(readr)
dansmarue = read_csv("./data/dansmarue_small.csv")
dansmarue.sf = st_as_sf(dansmarue,coords = c("lat","long"),4326)
?st_as_sf
dansmarue.sf = st_as_sf(dansmarue,coords = c("lat","long"),crs = 4326)
shiny::runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
library(ggplot2)
runApp('ex')
library(dplyr)
runApp('ex')
library(shiny)
library(ggplot2)
library(readr)
library(sf)
library(dplyr)
library(cartography)
dansmarue = read_csv("../data/dansmarue_small.csv")
dansmarue.sf = st_as_sf(dansmarue,coords = c("lat","long"),crs = 4326)
input=list(cat=unique(dansmarue$TYPE)[1])
data = dansmarue.sf %>% filter(TYPE==input$cat)
ggplot(data)+geom_sf(aes(color=type))
ggplot(data)+geom_sf(aes(color=TYPE))
dansmarue.sf = st_as_sf(dansmarue,coords = c("long","lat"),crs = 4326)
input=list(cat=unique(dansmarue$TYPE)[2])
data = dansmarue.sf %>% filter(TYPE==input$cat)
ggplot(data)+geom_sf(aes(color=TYPE))
ggplot(data)+geom_sf(aes(color=TYPE,opacity=0.3))
ggplot(data)+geom_sf(aes(color=TYPE,alpha=0.3))
runApp('ex')
runApp('ex')
?geom_point
runApp('ex')
ggplot(data %>% head(10000))+geom_sf(aes(color=TYPE),alpha=0.3,stroke="none")+theme_light()
ggplot(data %>% head(10000))+geom_sf(aes(color=TYPE),alpha=0.3,stroke=0)+theme_light()
ggplot(data %>% head(10000))+geom_sf(aes(color=TYPE),alpha=0.25,stroke=0,size=2)+theme_light()
data = dansmarue.sf %>% filter(TYPE %in% input$cat)
data = dansmarue.sf %>% filter(TYPE %in% input$cat)
data = dansmarue.sf %>% filter(TYPE %in% input$cat)
ggplot(data%>% group_by(DATEDECL,TYPE) %>% count())+geom_line(aes(group=TYPE,y=n,x=DATEDECL))
data%>% group_by(DATEDECL,TYPE) %>% count()
data%>% st_drop_geometry() %>% group_by(DATEDECL,TYPE) %>% count()
runApp('ex')
runApp('ex')
runApp('ex')
data
mtq_grid <- getGridLayer(x = data %>% st_transform(2154), cellsize = 100,
type = "hexagonal")
getGridLayer()
getGridLayer
getGridAll
cartography:::getGridAll
cartography:::getGridAll(data %>% st_trasnform(2154),100,FALSE)
cartography:::getGridAll(data %>% st_transform(2154),100,FALSE)
st_make_grid()
?st_make_grid()
gr = st_make_grid(data %>% st_transform(2154)),2000)
gr = st_make_grid(data %>% st_transform(2154),2000)
plot(gr)
gr = st_make_grid(data %>% st_transform(2154),500)
plot(gr)
gr = st_make_grid(data %>% st_transform(2154),200)
plot(gr)
ov=st_within(data,gr)
ov=st_within(data %>% st_transform(2154),gr)
ov
ov=st_within(gr,data %>% st_transform(2154))
ov
lapply(ov,length)
sapply(ov,length)
ov=st_contains(gr,data %>% st_transform(2154))
ov
sapply(ov,length)
gr
st_as_sfc(gr)
st_sf(data.frame(n=lapply(ov,length)),gr)
st_sf(data.frame(n=sapply(ov,length)),gr)
data.sf=st_sf(data.frame(n=sapply(ov,length)),gr)
choroLayer(x = data.sf, var = "n",
method = "quantile", nclass = 8)
choroLayer(x = data.sf, var = "n",
method = "quantile", nclass = 5)
choroLayer(x = data.sf %>% filter(n>0), var = "n",
method = "quantile", nclass = 5)
choroLayer(x = data.sf %>% filter(n>0), var = "n",
method = "quantile", nclass = 4)
dansmarue = read_csv("../data/dansmarue_small.csv")
dansmarue.sf = st_as_sf(dansmarue,coords = c("long","lat"),crs = 4326) st_transform(2154)
dansmarue.sf = st_as_sf(dansmarue,coords = c("long","lat"),crs = 4326) %>% st_transform(2154)
gr = st_make_grid(dansmarue.sf  ,200)
dansmarue = read_csv("./data/dansmarue_small.csv")
dansmarue.sf = st_as_sf(dansmarue,coords = c("long","lat"),crs = 4326) %>% st_transform(2154)
gr = st_make_grid(dansmarue.sf  ,200)
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
red.pal(5)
red.pal
choroLayer(x = data.sf %>% filter(n>0), var = "n",
method = "quantile", nclass = 4,pal1 = "red.pal")
?choroLayer
runApp('ex')
dansmarue.sf$DATEDECL
class(dansmarue.sf$DATEDECL)
min(dansmarue.sf$DATEDECL)
?dateRangeInput
?plotOutput
runApp('ex')
runApp('ex')
runApp()
runApp('ex')
runApp('ex')
runApp()
runApp('ex')
?carto.pal
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
sidebarPanel()
?sidebarPanel()
runApp('ex')
dansmarue
st_within(dansmarue.sf,grid)
dansmarue.sf
st_within(dansmarue.sf,grid)
st_crs(dansmarue.sf)
st_crs(grid)
st_within(dansmarue.sf,gr)
gr %>% st_centroid()
carr= st_within(dansmarue.sf,gr)
dansmarue.sf$id_car = carr
dansmarue.sf %>% st_drop_geometry() %>% group_by(id_car) %>% count()
dansmarue.sf$id_car = as.vector(carr)
dansmarue.sf %>% st_drop_geometry() %>% group_by(id_car) %>% count()
dansmarue.sf$id_car
carr
class(carr)
as.list(carr)
class(as.list(carr))
View(carr)
?sgbp
as.matrix(carr)
sapply(carr,function(a){a})
sapply(carr,function(a){a[1]})
dansmarue.sf$id_car=sapply(carr,function(a){a[1]})
dansmarue.sf %>% st_drop_geometry() %>% group_by(id_car) %>% count()
gr
gr_p = st_sf(data.frame(id_car=1:nrow(gr)),gr %>% st_centroid())
gr_p = st_sf(data.frame(id_car=1:length(gr)),gr %>% st_centroid())
plot(gr_p)
dansmarue.sf %>% group_by(id_car) %>% count()
dansmarue.sf %>% st_drop_geometry()%>% group_by(id_car) %>% count()
dansmarue.sf %>% st_drop_geometry()%>% group_by(id_car) %>% count()
?count
runApp('ex')
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
data=dansmarue.sf
nbocc = data %>% st_drop_geometry()%>% group_by(id_car) %>% count()
gr_p %>% left_join(nbocc)
gr_p %>% left_join(nbocc) %>% filter(!is.na(n))
data.sf = gr_p %>% left_join(nbocc) %>% filter(!is.na(n))
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444")
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444")
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444",fixmax = 3)
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444",fixmax = 0.2)
?propSymbolsLayer
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444",inches = 0.2)
propSymbolsLayer(x = data.sf, var = "n",
legend.title.txt = "Nombre de signalements",
col = "#aa4444",inches = 0.05)
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
runApp('ex')
data.sf
dansmarue.sf
runApp('ex')
dansmarue = read_csv("./data/dansmarue_small.csv")
dansmarue.sf = st_as_sf(dansmarue,coords = c("long","lat"),crs = 4326) %>% st_transform(2154)
gr = st_make_grid(dansmarue.sf  ,400)
carr= st_within(dansmarue.sf,gr)
dansmarue.sf$id_car=sapply(carr,function(a){a[1]})
gr_p = st_sf(data.frame(id_car=1:length(gr)),gr %>% st_centroid())
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
bb      <- gr_p %>% st_transform(4326) %>% st_bbox()
q       <- opq(bbox = bb,timeout = 180)
qm      <- add_osm_feature (q, key = 'highway',value = 'motorway', value_exact = FALSE)
qt      <- add_osm_feature (q, key = 'highway',value = 'trunk', value_exact = FALSE)
qp      <- add_osm_feature (q, key = 'highway',value = 'primary', value_exact = FALSE)
motorway<- osmdata_sf(qm)
trunk   <- osmdata_sf(qt)
primary <- osmdata_sf(qp)
roads    <- c(primary,trunk,motorway)$osm_lines %>% st_transform(st_crs(gr_p))
library(osmdata)
q       <- opq(bbox = bb,timeout = 180)
qm      <- add_osm_feature (q, key = 'highway',value = 'motorway', value_exact = FALSE)
qt      <- add_osm_feature (q, key = 'highway',value = 'trunk', value_exact = FALSE)
qp      <- add_osm_feature (q, key = 'highway',value = 'primary', value_exact = FALSE)
motorway<- osmdata_sf(qm)
trunk   <- osmdata_sf(qt)
primary <- osmdata_sf(qp)
roads    <- c(primary,trunk,motorway)$osm_lines %>% st_transform(st_crs(gr_p))
roads.geom = st_intersection(st_geometry(roads),st_convex_hull(gr_p))
# Get the shape of the main river "La seine"
qr <- q %>%
add_osm_feature (key = 'waterway') %>%
add_osm_feature(key = "name:fr", value = "La Seine")
river <- osmdata_sf(qr)
river.geom <- st_geometry(river$osm_lines %>% filter(name.fr == "La Seine")) %>%
st_transform(st_crs(sm))
river.geom <- st_geometry(river$osm_lines %>% filter(name.fr == "La Seine")) %>%
st_transform(st_crs(gr_p))
# the bbox is used to center the map on the Seine Maritime depatement
plot(st_geometry(roads.geom),col="#666666",lwd = 0.8)
roads
roads.geom
plot(roads)
plot(st_geometry(roads))
roads.geom = st_geometry(roads)
# the bbox is used to center the map on the Seine Maritime depatement
plot(st_geometry(roads.geom),col="#666666",lwd = 0.8)
plot(st_geometry(river.geom),col="azure",lwd = 3,add=TRUE)
?rm
rm(c("qm","qt","qp","motorway","trunk","primary","roads"))
rm(list=c("qm","qt","qp","motorway","trunk","primary","roads"))
rm(list=c("q","qr","bb","river"))
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
?propSymbolsLayer
runApp('ex')
bb      <- gr_p %>% st_transform(4326) %>% st_bbox()
q       <- opq(bbox = bb,timeout = 180)
q %>% add_osm_feature(key = "place", value = "neighbourhood")
neig <- osmdata_sf(qn)
qn = q %>% add_osm_feature(key = "place", value = "neighbourhood")
neig <- osmdata_sf(qn)
neig$osm_points
neig$osm_points$name.fr
neig$osm_polygons
neig$osm_polygons$name
neig$osm_multipolygons
qn = q %>% add_osm_feature(key = "place")
neig <- osmdata_sf(qn)
neig$osm_polygons
neig$osm_polygons$name.fr
neig %>% filter(!is.na(name.fr)) %>% pull(name.fr)
neig$osm_polygons %>% filter(!is.na(name.fr)) %>% pull(name.fr)
neig$osm_points %>% filter(!is.na(name.fr)) %>% pull(name.fr)
neig$osm_multipolygons %>% filter(!is.na(name.fr)) %>% pull(name.fr)
neig$osm_lines %>% filter(!is.na(name.fr)) %>% pull(name.fr)
neig$osm_lines %>% filter(!is.na(name)) %>% pull(name)
qn = q %>% add_osm_feature(key = "place",value="suburb")
places= <- osmdata_sf(qr)
places <- osmdata_sf(qr)
places <- osmdata_sf(qn)
places$osm_points
places$osm_points$name
places$osm_points$source
places.geom = places$osm_points %>% filter(!is.na(name),!duplicated(name))
places.geom
places.geom = places$osm_points %>% filter(!is.na(name),!duplicated(name)) %>% select(name)
places.geom
runApp('ex')
runApp('ex')
rm(list=c("qn","places"))
rm(list=c("q","qr","bb","river"))
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
plot(st_geometry(roads.geom),col="#666666",lwd = 0.8)
plot(st_geometry(river.geom),col="azure",lwd = 3,add=TRUE)
labelLayer(places.geom,txt=name)
places.geom
labelLayer(places.geom,txt="name")
places_geom = places_geom%>% st_transform(st_crs(gr_p))
places.geom = places.geom%>% st_transform(st_crs(gr_p))
save.image("/data/Projets/visu/data/dansmarue.RData")
runApp('ex')
places.geom
places.geom$name
labelLayer(places.geom,txt="name")
runApp('ex')
dansmarue.sf$INTERVENANT
unique(dansmarue.sf$INTERVENANT)
runApp('ex')
paste0(base,year[i],"-",format("02i%",month[j]))
paste0(base,year[i],"-",format("02i%",month[j]))
base = 'https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_'
paste0(base,year[i],"-",format("02i%",month[j]))
i=1
j=1
base = 'https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_'
paste0(base,year[i],"-",format("02i%",month[j]))
paste0(base,years[i],"-",format("02i%",months[j]))
years = 2010:2019
months = 1:12
i=1
j=1
base = 'https://s3.amazonaws.com/nyc-tlc/trip+data/yellow_tripdata_'
paste0(base,years[i],"-",format("02i%",months[j]))
sprintf()
paste0(base,years[i],"-",sprintf("02i%",months[j]))
paste0(base,years[i],"-",sprintf("0i%",months[j]))
?sprintf
paste0(base,years[i],"-",sprintf("%02i",months[j]))
url  = paste0(base,years[i],"-",sprintf("%02i",months[j]),".csv")
