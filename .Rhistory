plot(st_geometry(deps), col = "ivory", border="ivory3", bg="azure")
choroLayer(deps, var = "bornrate",
col = cols, border = "grey80",
legend.values.rnd = 1,
lwd = 0.4, legend.pos = "topleft",
legend.title.txt = "birth rate", add=T)
# Add a layout
layoutLayer(title = "birthrate",
sources = "OpenStreetMap",
theme = "green.pal",
col = "darkred", coltitle = "white",
tabtitle = TRUE,
frame = TRUE, scale = 10)
north(pos = "topright")
library(jsonlite)
velibNY=fromJSON("./data/input_NewYork.json")
library(jsonlite)
velibNY=fromJSON("input_NewYork.json")
library(jsonlite)
velibNY=fromJSON("./data/input_NewYork.json")
lst = velibNY$stationBeanList
stations = do.call(cbind,lst)
st.sf = st_as_sf(velibNY$stationBeanList %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
velibNY_c <- st_centroid(st.sf)
velibNY_v <- st_voronoi(x = st_union(velibNY_c))
velibNY_v <- st_intersection(st_cast(velibNY_v), st_union(st.sf))
velibNY_v <- st_join(x = st_sf(velibNY_v), y = velibNY_c, join=st_intersects)
velibNY_v <- st_cast(velibNY_v,"POINT")
plot(st_geometry(velibNY_v), col='lightblue')
library(sf)
# Import geo layers
mp <- st_read(dsn = "monuments_paris.geojson",
stringsAsFactors = F, quiet=TRUE)
library(leaflet)
mp.center.4326 = mp %>% st_centroid()%>% st_transform(4326)
library(sf)
# Import geo layers
mp <- st_read(dsn = "./data/monuments_paris.geojson",
stringsAsFactors = F, quiet=TRUE)
# change projection (lambert93)
mp <- st_transform(mp, 2154)
# Import dataset
mh <- read.csv("monuments-historiques.csv",sep = ";")
library(sf)
# Import geo layers
mp <- st_read(dsn = "./data/monuments_paris.geojson",
stringsAsFactors = F, quiet=TRUE)
# change projection (lambert93)
mp <- st_transform(mp, 2154)
# Import dataset
mh <- read.csv("./data/monuments-historiques.csv",sep = ";")
colnames(mh)[14]="id"
# merge geolayer and dataset
mp <- merge(mp, mh, by="id", all.x=TRUE)
library(leaflet)
mp.center.4326 = mp %>% st_centroid()%>% st_transform(4326)
leaflet(data = mp.center.4326 ) %>%
addTiles() %>%
addCircleMarkers(fillColor = "#449944",
stroke=FALSE,
fillOpacity = 1,
popup = ~paste(Appellation.courante,":",Adresse))
iris75 <- st_read(dsn = "iris75.geojson",
stringsAsFactors = F, quiet=TRUE)
iris75 <- st_read(dsn = "./data/iris75.geojson",
stringsAsFactors = F, quiet=TRUE)
colnames(iris75)[1]="INSEE"
df = data.frame(iris75$INSEE,iris75$CODE_IRIS)
colnames(df)=c("INSEE","CODE_IRIS")
df = left_join(df,mh,by=c("INSEE"="INSEE"))
mp = merge(mp,df,by="id")
nbmon <- mp %>%
group_by(CODE_IRIS) %>%
summarize(sum)
library(jsonlite)
velibNY=fromJSON("input_NewYork.json")
library(jsonlite)
velibNY=fromJSON("./data/input_NewYork.json")
lst = velibNY$stationBeanList
stations = do.call(cbind,lst)
st.sf = st_as_sf(velibNY$stationBeanList %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
plot(st_geometry(st.sf))
propSymbolsLayer(st.sf, var = "availableBikes")
title("Available Bikes")
par(mar=c(0.2,0.2,1.4,0.2))
bb <- st_bbox(st.sf)
plot(st_geometry(st.sf))
plot(st_geometry(st.sf), col="cornsilk2", border = NA, lwd = 0.5, add=T)
propSymbolsLayer(st.sf, var = "availableBikes", col="darkblue", inches = 0.6,
border = "white", lwd=0.7, symbols = "square",
legend.style = "e", legend.pos="topleft",
legend.title.txt = "Labor Force\n(2014)",
legend.values.rnd = 0)
barscale(size = 10)
# North Arrow
north(pos = "topright", col = "darkblue")
layoutLayer(title = "Available Bikes in New York",
col = "darkblue", coltitle = "white", tabtitle = TRUE,
frame = TRUE, scale = NULL, north = FALSE)
title("Available Bikes")
library(sf)
library(dplyr)
library(stringr)
library(leaflet)
library(rjson)
library(cartography)
cont_dep = read_sf("data/exo6_dep/dep.shp")
data = read.csv("data/exo6_data.csv", header = TRUE, sep = ",", encoding = "UTF-8")
head(data)
data_nais = data %>% group_by(code_dept) %>% summarise(naissances = sum(nombre_naissances_2011), population = sum(Population_2011)) %>% mutate(taux = naissances/population)
setdiff(as.character(cont_dep$code_insee), as.character(data_nais$code_dept))
data_nais = data_nais %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
setdiff(as.character(cont_dep$code_insee), as.character(data_nais$code_dept))
data_join = cont_dep %>%
inner_join(data_nais,by=c("code_insee"="code_dept")) %>%
filter(!is.na(taux))
plot(st_geometry(data_join))
choroLayer(data_join, var="taux")
json = fromJSON(file="./data/input_NewYork.json")
library(sf)
library(dplyr)
library(stringr)
library(leaflet)
library(rjson)
library(cartography)
cont_dep = read_sf("data/exo6_dep/dep.shp")
detach(rjson)
detach("rjson")
detach("package:jsonlite", unload = TRUE)
library(sf)
library(dplyr)
library(stringr)
library(leaflet)
library(rjson)
library(cartography)
cont_dep = read_sf("data/exo6_dep/dep.shp")
json = fromJSON(file="./data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind,lst)
head(stations)
st.sf = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
d = st_union(st.sf)
v = st_voronoi(d)
v = st_intersection(st_cast(v), d)
v = st_join(st_sf(v), st.sf, join = st_intersects)
v = st_cast(v, "POLYGON")
leaflet(data=v) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "red")
monum_paris = read_sf("./data/monuments_paris.geojson")
monum_histo = read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE, encoding = "UTF-8")
monum = monum_paris %>% inner_join(monum_histo,by=c("id"="Référence"))
leaflet(data = monum) %>%
addTiles() %>%
addMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante))
iris = st_read("./data/iris75.geojson")
new_iris = st_transform(iris, 2154)
monum_iris = st_contains(new_iris, st_transform(monum, 2154))
new_iris$nbMonum = sapply(monum_iris, length)
plot(st_geometry(new_iris))
propSymbolsLayer(new_iris, var = "nbMonum")
json = fromJSON(file="./data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind,lst)
head(stations)
st.sf = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
tiles <- getTiles(x = st.sf, type = "osm",crop=TRUE)
tilesLayer(tiles)
propSymbolsLayer(st.sf,var="availableBikes")
library(sf)
library(rjson)
library(leaflet)
library(dplyr)
library(cartography)
library(stringr)
dep = read_sf("./data/dep.shp")
dep = read_sf("./data/exo6_dep/dep.shp")
head(dep)
plot(st_geometry(dep))
data=read.csv("exo6_data.csv", header=T, encoding = "UTF-8")
data=read.csv("./data/exo6_data.csv", header=T, encoding = "UTF-8")
data_naiss_dep = data %>% group_by(code_dept) %>%
summarise(naissances = sum(nombre_naissances_2011),
pop = sum(Population_2011)) %>%
mutate(taux_naiss = (naissances / pop) * 1000)
head(data_naiss_dep, 20) #n'affiche que les 20 premières lignes
json = fromJSON(file = "./data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind, lst)
st.sf = st_as_sf(stations %>% filter(longitude, latitude), coords = c("longitude", "latitude"), crs=4326)
#Calcul des voronois
bbox_polygon <- function(x) {
bb <- sf::st_bbox(x)
p <- matrix(
c(bb["xmin"], bb["ymin"],
bb["xmin"], bb["ymax"],
bb["xmax"], bb["ymax"],
bb["xmax"], bb["ymin"],
bb["xmin"], bb["ymin"]),
ncol = 2, byrow = T
)
sf::st_polygon(list(p))
}
nc_centroids=st_centroid(st.sf)
box = st_sfc(bbox_polygon(nc_centroids))
head(nc_centroids)
head(st_union(nc_centroids))
v=st_voronoi(st_union(nc_centroids), box)
d=st_geometry(st.sf)
d=st_union(d)
hull=st_convex_hull(d)
plot(st_intersection(st_cast(v), hull), col = "grey") # clip to smaller box
plot(nc_centroids, add = TRUE)
monuments = st_read("monuments_paris.geojson")
monuments = st_read("./data/monuments_paris.geojson")
monuments_historiques = read.csv("./data/monuments-historiques.csv",header=T, sep = ";", stringsAsFactors = F)
#nettoyage des donnees
monuments$id = as.character(monuments$id)
monuments_historiques$RÃ.fÃ.rence=as.character(monuments_historiques$RÃ.fÃ.rence)
iris = st_read(dsn="iris75.geojson")
iris = st_read(dsn="./data/iris75.geojson")
iris_t = iris %>% st_transform(2154)
# monuments par iris
m_iris = st_contains(iris_t, st_transform(m,2154))
#nettoyage des donnees
monuments$id = as.character(monuments$id)
monuments_historiques$Référence=as.character(monuments_historiques$Référence)
monuments = st_read("./data/monuments_paris.geojson")
monuments_historiques = read.csv("./data/monuments-historiques.csv",header=T, sep = ";", stringsAsFactors = F)
#nettoyage des donnees
monuments$id = as.character(monuments$id)
monuments_historiques$Référence=as.character(monuments_historiques$Référence)
#jointure
m=monuments %>% left_join(monuments_historiques, by = c("id"="Référence"))
#carte interactive
leaflet(data = m) %>%
addTiles() %>%
addCircleMarkers( popup = ~ as.character(Appellation.courante),
label = ~ as.character(Appellation.courante), radius = 5, stroke = FALSE, color = "blueviolet")
iris = st_read(dsn="./data/iris75.geojson")
iris_t = iris %>% st_transform(2154)
# monuments par iris
m_iris = st_contains(iris_t, st_transform(m,2154))
#creation de la variable nombre de monuments par iris
iris_t$nbmonuments = sapply(m_iris, length)
# carte
par(mar = c(0.2, 0.2, 1.4, 0.2))
bb <- st_bbox(iris_t)
# the bbox is used to center the map on the Seine Maritime depatement
plot(st_geometry(iris_t), col = "ivory", border ="ivory3",  bg = "azure",
xlim = bb[c(1, 3)], ylim =  bb[c(2, 4)])
propSymbolsLayer(iris_t, var = "nbmonuments", col = "darkblue", inches = 0.3,
border = "white", lwd=0.7, symbols = "square",
legend.style = "e", legend.pos = "topleft",
legend.title.txt = "Nombre de monuments",
legend.values.rnd = 0)
north(pos = "topright", col = "darkblue")
layoutLayer(title = "Nombre de monuments par iris à Paris",
col = "darkblue", coltitle = "white", tabtitle = TRUE,
frame = TRUE, scale = NULL, north = FALSE)
leaflet(data=st.sf) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "blue")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(sf)
library(cartography)
library(stringr)
data_pol=read_sf("./data/exo6_dep/dep.shp")
class(data_pol)
str(data_pol)
data_com=read.csv("./data/exo6_data.csv")
data_dep_naiss= data_com %>%
group_by(code_dept) %>%
summarise(naissances = sum(nombre_naissances_2011),
pop=sum(Population_2011)) %>%
mutate(txnaiss = naissances/pop*1000)
data_dep_naiss= data_com %>%
group_by(code_dept) %>%
summarise(naissances = sum(nombre_naissances_2011),
pop=sum(Population_2011)) %>%
mutate(txnaiss = naissances/pop*1000)
data_dep_naiss= data_com %>%
group_by(code_dept) %>%
summarise(naissances = sum(nombre_naissances_2011),
pop=sum(Population_2011)) %>%
mutate(txnaiss = naissances/pop*1000)
as.character(data_dep_naiss$code_dept)
as.character(data_pol@data$code_insee)
setdiff(as.character(data_dep_naiss$code_dept),
as.character(data_pol@data$code_insee))
data_dep_naiss = data_dep_naiss %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
plot(st_geometry(data_map))
library(cartography)
choroLayer(data_map,var="txnaiss")
data_map = data_pol %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
filter(!is.na(txnaiss))
plot(st_geometry(data_map))
library(cartography)
choroLayer(data_map,var="txnaiss")
title("Taux de naissance pour 1000 habitants")
json = fromJSON(file="http://vlsstats.ifsttar.fr/data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind,lst)
st.sf = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
monum      = read_sf("./data/monuments_paris.geojson")
meta_data  = read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
monum_full = monum %>% left_join(meta_data,by=c("id"="RÃ©fÃ©rence"))
monum      = read_sf("./data/monuments_paris.geojson")
meta_data  = read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
monum_full = monum %>% left_join(meta_data,by=c("id"="Référence"))
library(leaflet)
leaflet(data = monum_full) %>%
addTiles() %>%
addMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante))
leaflet(data = monum_full) %>%
addTiles() %>%
addCircleMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante),radius=5,stroke=FALSE)
iris = read_sf("./data/iris75.geojson")
iris2154 = iris %>% st_transform(2154)
mon = st_contains(iris2154,st_transform(monum_full,2154))
mon
iris$nbmonum = sapply(mon,length)
plot(st_geometry(iris2154))
propSymbolsLayer(iris2154,var="nbmonum")
leaflet(data=st.sf) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "red")
library(cartography)
tiles <- getTiles(x = st.sf, type = "osm",crop=TRUE)
tilesLayer(tiles)
propSymbolsLayer(st.sf,var="availableBikes")
library(sf)
library(tidyverse)
library(sf)
library(rjson)
library(leaflet)
library(dplyr)
library(cartography)
library(stringr)
dep_france <- read_sf("./data/exo6_dep/dep.shp")
plot(st_geometry(dep_france))
data=read.csv(file="./data/exo6_data.csv", header=T, encoding = "UTF-8")
data_naiss_dep=data %>% group_by(code_dept) %>%
summarise(naissances = sum(nombre_naissances_2011),
pop=sum(Population_2011)) %>%
mutate(taux_naiss = (naissances/pop)*1000)
as.character(data_naiss_dep$code_dept)
data_naiss_dep = data_naiss_dep %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
as.character(dep_france$code_insee)
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
filter(!is.na(tx_naiss))
dep_france
data_dep_naiss
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
filter(!is.na(tx_naiss))
library(sf)
library(rjson)
library(leaflet)
library(dplyr)
library(cartography)
library(stringr)
dep_france <- read_sf("./data/exo6_dep/dep.shp")
plot(st_geometry(dep_france))
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
filter(!is.na(tx_naiss))
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept")) %>%
dplyr::filter(!is.na(tx_naiss))
data_map = dep_france %>%
left_join(data_dep_naiss,by=c("code_insee"="code_dept"))
data_map
data_map$txnaiss
data_map(filter(!is.na(txnaiss)))
json = fromJSON(file="http://vlsstats.ifsttar.fr/data/input_NewYork.json")
lst = lapply(json$stationBeanList, function(s){as.data.frame(s)})
stations = do.call(rbind,lst)
st.sf = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
#Calcul des voronois
bbox_polygon <- function(x) {
bb <- sf::st_bbox(x)
p <- matrix(
c(bb["xmin"], bb["ymin"],
bb["xmin"], bb["ymax"],
bb["xmax"], bb["ymax"],
bb["xmax"], bb["ymin"],
bb["xmin"], bb["ymin"]),
ncol = 2, byrow = T
)
sf::st_polygon(list(p))
}
nc_centroids=st_centroid(st.sf)
box=st_sfc(bbox_polygon(nc_centroids))
head(nc_centroids)
head(st_union(nc_centroids))
v=st_voronoi(st_union(nc_centroids),box)
d=st_geometry(st.sf)
d=st_union(d)
hull=st_convex_hull(d)
plot(st_intersection(st_cast(v), hull), col = "grey") # clip to smaller box
plot(nc_centroids, add = TRUE)
monuments  = read_sf("./data/monuments_paris.geojson")
monuments_hist  = read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
monuments$id=as.character(monuments$id)
monuments_hist$Référence=as.character(monuments_hist$Référence)
#on passe à la jointure avant de tracer la carte interactive
m=monuments %>% left_join(monuments_hist, by=c("id"="Référence"))
#carte interactive
leaflet(data = m) %>%
addTiles() %>%
addCircleMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante),radius=5,stroke=FALSE, color = "blueviolet")
iris=st_read(dsn="./data/iris75.geojson")
iris_t = iris %>% st_transform(2154)
# monuments par iris
monuments_iris = st_contains(iris_t,st_transform(m,2154))
iris_t$nb_monuments = sapply(monuments_iris,length)
# carte
par(mar=c(0.2,0.2,1.4,0.2))
bb <- st_bbox(iris_t)
plot(st_geometry(iris_t), col = "ivory", border="ivory3",  bg="azure",
xlim = bb[c(1,3)], ylim =  bb[c(2,4)])
propSymbolsLayer(iris_t, var = "nb_monuments", col="darkred", inches = 0.3,
border = "white", lwd=0.7, symbols = "square",
legend.style = "e", legend.pos="topleft",
legend.title.txt = "Nombre de monuments",
legend.values.rnd = 0)
north(pos = "topright", col = "darkred")
layoutLayer(title = "Nombre de monuments par iris à Paris",
col = "darkred", coltitle = "white", tabtitle = TRUE,
frame = TRUE, scale = NULL, north = FALSE)
leaflet(data=st.sf) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "blue")
library(sf)
library(dplyr)
dep=st_read("./data/exo6_dep/dep.shp")
data=read.csv("exo6_data.csv")
dep=st_read("./data/exo6_dep/dep.shp")
data=read.csv("./data/exo6_data.csv")
library(stringr)
#dep$wikipedia
names(dep)[4]="dept"
dep$dept=str_replace_all(dep$dept,"fr:","")
dep$dept
#dep=str_replace_all(dep,"�","é")
data2=data %>% group_by(code_dept) %>% summarise(nbr_naissance = sum(nombre_naissances_2011),
population2011=sum(Population_2011)) %>%
mutate(taux_naissance = nbr_naissance/population2011*100)
data2
data2 =data2 %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
data2 =data2 %>%
mutate(code_dept=as.character(code_dept)) %>%
mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))
DATA = dep %>%
left_join(data2,by=c("code_insee"="code_dept")) %>%
filter(!is.na(taux_naissance))
library(cartography)
plot(st_geometry(DATA))
choroLayer(DATA,var="taux_naissance",legend.title.txt="taux de naissance
(en %)")
title("Taux de naissance")
library(leaflet)
json = fromJSON(file = "input_NewYork.json")
library(leaflet)
json = fromJSON(file = "./data/input_NewYork.json")
s = lapply(json$stationBeanList, function(s){as.data.frame(s)})
voronois = do.call(rbind,s)
voronois = st_as_sf(voronois %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"))
plot(voronois)
monument=read_sf("monuments_paris.geojson")
monument=read_sf("./data/monuments_paris.geojson")
monument
dataexo3= read.csv("./data/monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
str(dataexo3)
dataexo3
jointexo3 = monument %>% left_join(dataexo3,by=c("id"="Référence"))
# carte interactive
leaflet(data = jointexo3) %>%
addTiles() %>%
addMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante))
leaflet(data = jointexo3) %>%
addTiles() %>%
addCircleMarkers( popup = ~as.character(Appellation.courante),
label = ~as.character(Appellation.courante),radius=5,stroke=FALSE)
iris = read_sf("iris75.geojson")
iris = read_sf("./data/iris75.geojson")
iris2154 = iris %>% st_transform(2154)
x= iris2154 %>%  st_contains(st_transform(jointexo3,2154))
iris2154$nbmonum = sapply(x,length)
plot(st_geometry(iris2154))
propSymbolsLayer(iris2154,var="nbmonum")
voronois2 = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326)
leaflet(data=voronois2) %>% addTiles() %>%
addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "red")
tiles <- getTiles(x = voronois2, type = "osm",crop=TRUE)
tilesLayer(tiles)
propSymbolsLayer(voronois2,var="availableBikes")
install.packages("revealjs")
install.packages("revealjs")
