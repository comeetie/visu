---
title: "DM EXO6"
author: "Evin DOKUR"
date: "17/12/2019"
output: pdf_document
---


```{r}
library(sf)
library(dplyr)
```

```{r}
dep=st_read("exo6_dep/dep.shp")
data=read.csv("exo6_data.csv")
```

```{r}
library(stringr)
#dep$wikipedia
names(dep)[4]="dept"
dep$dept=str_replace_all(dep$dept,"fr:","")
dep$dept
#dep=str_replace_all(dep,"�","é")

```

```{r}
data
```

```{r}
data2=data %>% group_by(code_dept) %>% summarise(nbr_naissance = sum(nombre_naissances_2011),
            population2011=sum(Population_2011)) %>%     
            mutate(taux_naissance = nbr_naissance/population2011*100)
data2
```


```{r}
data2 =data2 %>% 
  mutate(code_dept=as.character(code_dept)) %>%
  mutate(code_dept = ifelse(str_length(code_dept)==1,paste0("0",code_dept),code_dept))

```


```{r,warning=FALSE}
DATA = dep %>% 
  left_join(data2,by=c("code_insee"="code_dept")) %>% 
  filter(!is.na(taux_naissance))

```


```{r}
library(rjson)
write_sf(DATA,"DATA.geojson",driver="GeoJSON")
```


```{r}
Ouvrir=st_read("DATA.geojson")
```




```{r}
library(cartography)
plot(st_geometry(DATA))
choroLayer(DATA,var="taux_naissance",legend.title.txt="taux de naissance
           (en %)")
title("Taux de naissance")
```


# Exercice 2 

```{r}
library(leaflet)

json = fromJSON(file = "input_NewYork.json")

s = lapply(json$stationBeanList, function(s){as.data.frame(s)})

voronois = do.call(rbind,s)

voronois = st_as_sf(voronois %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude")) 

plot(voronois)
```


# Exercice 3 

```{r}
monument=read_sf("monuments_paris.geojson")
monument
```


```{r}
dataexo3= read.csv("monuments-historiques.csv", sep=";",stringsAsFactors = FALSE)
str(dataexo3)
dataexo3
```



```{r}
jointexo3 = monument %>% left_join(dataexo3,by=c("id"="Référence"))

# carte interactive

leaflet(data = jointexo3) %>% 
  addTiles() %>%
  addMarkers( popup = ~as.character(Appellation.courante), 
              label = ~as.character(Appellation.courante))

leaflet(data = jointexo3) %>% 
  addTiles() %>%
  addCircleMarkers( popup = ~as.character(Appellation.courante), 
              label = ~as.character(Appellation.courante),radius=5,stroke=FALSE)
```



```{r}
iris = read_sf("iris75.geojson")
iris2154 = iris %>% st_transform(2154)

x= iris2154 %>%  st_contains(st_transform(jointexo3,2154))

iris2154$nbmonum = sapply(x,length)


plot(st_geometry(iris2154))
propSymbolsLayer(iris2154,var="nbmonum")
```


# Exo 4 

```{r}
voronois2 = st_as_sf(stations %>% filter(longitude!=0,latitude!=0),coords = c("longitude","latitude"),crs=4326) 

leaflet(data=voronois2) %>% addTiles() %>% 
  addCircleMarkers(radius = ~ sqrt(availableBikes),stroke=FALSE,fillOpacity = 1,color = "red")


tiles <- getTiles(x = voronois2, type = "osm",crop=TRUE)
tilesLayer(tiles)
propSymbolsLayer(voronois2,var="availableBikes")
```

